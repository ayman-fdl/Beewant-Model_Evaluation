import streamlit as st
import json
import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="Rapport d'√âvaluation Qwen 3 - Search Web",
    page_icon="üìä",
    layout="wide"
)

# Titre de l'application
st.title("Rapport d'√âvaluation Qwen 3 - Search Web")
st.markdown("""
Cette application pr√©sente une analyse d√©taill√©e des performances de Qwen 3 dans diff√©rents domaines th√©matiques.
Les √©valuations sont bas√©es sur des crit√®res pr√©cis pour les sources et les r√©ponses.
""")

# Chargement des donn√©es
@st.cache_data
def load_evaluation_data():
    data = []
    for file in os.listdir("evaluation_web"):
        if file.endswith(".json"):
            with open(os.path.join("evaluation_web", file), "r") as f:
                eval_data = json.load(f)
                thematic = file.replace("Evaluation_", "").replace(".json", "")
                
                # Calcul des moyennes des sources
                source_relevance = np.mean([source["relevance"] for source in eval_data["sources"]])
                source_credibility = np.mean([source["credibility"] for source in eval_data["sources"]])
                source_freshness = np.mean([source["freshness"] for source in eval_data["sources"]])
                
                for response in eval_data["response"]:
                    data.append({
                        "thematic": thematic,
                        "model": response["model"],
                        "source_relevance": source_relevance,
                        "source_credibility": source_credibility,
                        "source_freshness": source_freshness,
                        "relevance": response["Relevance"],
                        "correctness": response["Correctness"],
                        "completeness": response["Completeness"],
                        "clarity": response["Clarity"],
                        "depth": response["Depth"],
                        "comment": response["Comment"]
                    })
    return pd.DataFrame(data)

# Chargement des donn√©es
df = load_evaluation_data()

# Section des crit√®res d'√©valuation
st.header("Crit√®res d'√âvaluation")

with st.expander("Crit√®res d'√âvaluation des Sources", expanded=False):
    st.markdown("""
    ### Pertinence (1-5)
    √âvalue dans quelle mesure le titre et le snippet de la source indiquent clairement qu'elle contient des informations pertinentes pour la question. La pertinence est jug√©e sur la base de la correspondance entre les mots-cl√©s de la question et ceux pr√©sents dans le titre et le snippet.

    ### Cr√©dibilit√© (1-5)
    √âvalue la fiabilit√© apparente de la source bas√©e sur le domaine du lien (par exemple, .edu, .gov, .org), le nom du site web, et la formulation du titre et du snippet. Les sources provenant de domaines institutionnels, de m√©dias reconnus ou d'organisations √©tablies sont consid√©r√©es comme plus cr√©dibles.

    ### Actualit√© (1-5)
    Mesure la fra√Æcheur apparente de l'information bas√©e sur les indices temporels pr√©sents dans le titre et le snippet (dates, r√©f√©rences √† des √©v√©nements r√©cents). L'√©valuation se fait sur la base des mentions explicites de dates ou d'√©v√©nements r√©cents dans le snippet.
    """)

with st.expander("Crit√®res d'√âvaluation des R√©ponses", expanded=False):
    st.markdown("""
    ### Pertinence (1-5)
    √âvalue dans quelle mesure la r√©ponse r√©pond directement et pr√©cis√©ment √† la question pos√©e, sans digression ni information superflue. Une r√©ponse pertinente doit rester focalis√©e sur le sujet demand√©.

    ### Exactitude (1-5)
    Mesure la pr√©cision et la fiabilit√© des informations fournies. Une r√©ponse exacte doit √™tre bas√©e sur des faits v√©rifiables et des sources fiables, sans erreurs factuelles ou interpr√©tations incorrectes.

    ### Exhaustivit√© (1-5)
    √âvalue la couverture compl√®te du sujet, en incluant tous les aspects importants de la question. Une r√©ponse exhaustive doit aborder tous les points essentiels sans omissions significatives.

    ### Clart√© (1-5)
    Mesure la qualit√© de la structure et de la pr√©sentation de la r√©ponse. Une r√©ponse claire doit √™tre bien organis√©e, facile √† comprendre et utiliser un langage appropri√© pour le sujet.

    ### Profondeur (1-5)
    √âvalue le niveau d'analyse et de d√©tail fourni dans la r√©ponse. Une r√©ponse profonde doit aller au-del√† des informations de base, fournissant des analyses pertinentes et des d√©tails significatifs.
    """)

# Section 1: Vue d'ensemble
st.header("Vue d'Ensemble")

# Cr√©ation de deux colonnes pour les graphiques
col1, col2 = st.columns(2)

with col1:
    st.subheader("√âvaluation des Sources")
    # Calcul des moyennes globales pour les sources
    source_metrics = {
        "Pertinence": df["source_relevance"].mean(),
        "Cr√©dibilit√©": df["source_credibility"].mean(),
        "Actualit√©": df["source_freshness"].mean()
    }
    
    # Cr√©ation du graphique pour les sources
    source_fig = go.Figure()
    source_fig.add_trace(go.Bar(
        x=list(source_metrics.keys()),
        y=list(source_metrics.values()),
        text=[f"{val:.2f}" for val in source_metrics.values()],
        textposition='auto',
    ))
    
    source_fig.update_layout(
        title="Moyennes Globales des Sources",
        yaxis=dict(range=[0, 5]),
        showlegend=False
    )
    st.plotly_chart(source_fig, use_container_width=True)

with col2:
    st.subheader("√âvaluation des R√©ponses")
    # Calcul des moyennes globales pour les r√©ponses
    response_metrics = {
        "Pertinence": df["relevance"].mean(),
        "Exactitude": df["correctness"].mean(),
        "Exhaustivit√©": df["completeness"].mean(),
        "Clart√©": df["clarity"].mean(),
        "Profondeur": df["depth"].mean()
    }
    
    # Cr√©ation du graphique pour les r√©ponses
    response_fig = go.Figure()
    response_fig.add_trace(go.Bar(
        x=list(response_metrics.keys()),
        y=list(response_metrics.values()),
        text=[f"{val:.2f}" for val in response_metrics.values()],
        textposition='auto',
    ))
    
    response_fig.update_layout(
        title="Moyennes Globales des R√©ponses",
        yaxis=dict(range=[0, 5]),
        showlegend=False
    )
    st.plotly_chart(response_fig, use_container_width=True)

# Affichage des statistiques d√©taill√©es
st.subheader("Statistiques D√©taill√©es")

# Cr√©ation de deux colonnes pour les statistiques
col1, col2 = st.columns(2)

with col1:
    st.markdown("### Sources")
    source_stats = pd.DataFrame({
        "Crit√®re": ["Pertinence", "Cr√©dibilit√©", "Actualit√©"],
        "Moyenne": [df["source_relevance"].mean(), df["source_credibility"].mean(), df["source_freshness"].mean()],
        "Min": [df["source_relevance"].min(), df["source_credibility"].min(), df["source_freshness"].min()],
        "Max": [df["source_relevance"].max(), df["source_credibility"].max(), df["source_freshness"].max()]
    })
    # Formatage des colonnes num√©riques uniquement
    numeric_cols = source_stats.columns.difference(['Crit√®re'])
    st.dataframe(source_stats.style.format({col: "{:.2f}" for col in numeric_cols}))

with col2:
    st.markdown("### R√©ponses")
    response_stats = pd.DataFrame({
        "Crit√®re": ["Pertinence", "Exactitude", "Exhaustivit√©", "Clart√©", "Profondeur"],
        "Moyenne": [df["relevance"].mean(), df["correctness"].mean(), df["completeness"].mean(), df["clarity"].mean(), df["depth"].mean()],
        "Min": [df["relevance"].min(), df["correctness"].min(), df["completeness"].min(), df["clarity"].min(), df["depth"].min()],
        "Max": [df["relevance"].max(), df["correctness"].max(), df["completeness"].max(), df["clarity"].max(), df["depth"].max()]
    })
    # Formatage des colonnes num√©riques uniquement
    numeric_cols = response_stats.columns.difference(['Crit√®re'])
    st.dataframe(response_stats.style.format({col: "{:.2f}" for col in numeric_cols}))

# Section 2: Analyse par Th√©matique
st.header("Analyse par Th√©matique")

# S√©lection de la th√©matique
selected_thematic = st.selectbox(
    "S√©lectionnez une th√©matique",
    options=sorted(df['thematic'].unique())
)

# Filtrage des donn√©es pour la th√©matique s√©lectionn√©e
thematic_data = df[df['thematic'] == selected_thematic]

# Cr√©ation de deux colonnes pour les graphiques
col1, col2 = st.columns(2)

with col1:
    st.subheader("√âvaluation des Sources")
    # Cr√©ation du graphique pour les sources
    source_fig = go.Figure()
    
    # Utilisation des donn√©es du premier mod√®le uniquement
    model_data = thematic_data.iloc[0]
    source_fig.add_trace(go.Bar(
        x=["Pertinence", "Cr√©dibilit√©", "Actualit√©"],
        y=[model_data["source_relevance"],
           model_data["source_credibility"],
           model_data["source_freshness"]],
        text=[f"{val:.2f}" for val in [model_data["source_relevance"],
                                      model_data["source_credibility"],
                                      model_data["source_freshness"]]],
        textposition='auto',
    ))
    
    source_fig.update_layout(
        title="√âvaluation des Sources",
        yaxis=dict(range=[0, 5]),
        showlegend=False
    )
    st.plotly_chart(source_fig, use_container_width=True)

with col2:
    st.subheader("√âvaluation des R√©ponses")
    # Cr√©ation du graphique pour les r√©ponses
    response_fig = go.Figure()
    
    for model in thematic_data['model'].unique():
        model_data = thematic_data[thematic_data['model'] == model]
        response_fig.add_trace(go.Bar(
            name=model,
            x=["Pertinence", "Exactitude", "Exhaustivit√©", "Clart√©", "Profondeur"],
            y=[model_data["relevance"].iloc[0],
               model_data["correctness"].iloc[0],
               model_data["completeness"].iloc[0],
               model_data["clarity"].iloc[0],
               model_data["depth"].iloc[0]],
            text=[f"{val:.2f}" for val in [model_data["relevance"].iloc[0],
                                          model_data["correctness"].iloc[0],
                                          model_data["completeness"].iloc[0],
                                          model_data["clarity"].iloc[0],
                                          model_data["depth"].iloc[0]]],
            textposition='auto',
        ))
    
    response_fig.update_layout(
        title="√âvaluation des R√©ponses",
        barmode='group',
        yaxis=dict(range=[0, 5]),
        showlegend=True
    )
    st.plotly_chart(response_fig, use_container_width=True)

# Section 3: Donn√©es Brutes
st.header("Donn√©es Brutes")
st.dataframe(df)