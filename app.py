import streamlit as st
import json
import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(
    page_title="Rapport d'√âvaluation Qwen 3",
    page_icon="üìä",
    layout="wide"
)

# Titre et introduction
st.title("üìä Rapport d'√âvaluation de Qwen 3 - Capacit√©s de Recherche Web")
st.markdown("""
Cette application pr√©sente une analyse d√©taill√©e des performances de Qwen 3 dans diff√©rentes th√©matiques,
bas√©e sur l'√©valuation de ses capacit√©s de recherche web.
""")

# Section des crit√®res d'√©valuation
st.header("Crit√®res d'√âvaluation")

with st.expander("Crit√®res d'√âvaluation des Sources", expanded=False):
    st.markdown("""
    ### Pertinence (1-5)
    √âvalue dans quelle mesure le titre et le snippet de la source indiquent clairement qu'elle contient des informations pertinentes pour la question. La pertinence est jug√©e sur la base de la correspondance entre les mots-cl√©s de la question et ceux pr√©sents dans le titre et le snippet.

    ### Cr√©dibilit√© (1-5)
    √âvalue la fiabilit√© apparente de la source bas√©e sur le domaine du lien (par exemple, .edu, .gov, .org), le nom du site web, et la formulation du titre et du snippet. Les sources provenant de domaines institutionnels, de m√©dias reconnus ou d'organisations √©tablies sont consid√©r√©es comme plus cr√©dibles.

    ### Actualit√© (1-5)
    Mesure la fra√Æcheur apparente de l'information bas√©e sur les indices temporels pr√©sents dans le titre et le snippet (dates, r√©f√©rences √† des √©v√©nements r√©cents). L'√©valuation se fait sur la base des mentions explicites de dates ou d'√©v√©nements r√©cents dans le snippet.
    """)

with st.expander("Crit√®res d'√âvaluation des R√©ponses", expanded=False):
    st.markdown("""
    ### Pertinence (1-5)
    √âvalue dans quelle mesure la r√©ponse r√©pond directement et pr√©cis√©ment √† la question pos√©e, sans digression ni information superflue. Une r√©ponse pertinente doit rester focalis√©e sur le sujet demand√©.

    ### Exactitude (1-5)
    Mesure la pr√©cision et la fiabilit√© des informations fournies. Une r√©ponse exacte doit √™tre bas√©e sur des faits v√©rifiables et des sources fiables, sans erreurs factuelles ou interpr√©tations incorrectes.

    ### Exhaustivit√© (1-5)
    √âvalue la couverture compl√®te du sujet, en incluant tous les aspects importants de la question. Une r√©ponse exhaustive doit aborder tous les points essentiels sans omissions significatives.

    ### Clart√© (1-5)
    Mesure la qualit√© de la structure et de la pr√©sentation de la r√©ponse. Une r√©ponse claire doit √™tre bien organis√©e, facile √† comprendre et utiliser un langage appropri√© pour le sujet.

    ### Profondeur (1-5)
    √âvalue le niveau d'analyse et de d√©tail fourni dans la r√©ponse. Une r√©ponse profonde doit aller au-del√† des informations de base, fournissant des analyses pertinentes et des d√©tails significatifs.
    """)

# Fonction pour charger les donn√©es
def load_evaluation_data():
    data = []
    evaluation_dir = "evaluation_web"
    
    for filename in os.listdir(evaluation_dir):
        if filename.endswith(".json"):
            thematic = filename.replace("Evaluation_", "").replace(".json", "")
            with open(os.path.join(evaluation_dir, filename), 'r') as f:
                eval_data = json.load(f)
                for response in eval_data.get("response", []):
                    data.append({
                        "thematic": thematic,
                        "model": response["model"],
                        "relevance": response["Relevance"],
                        "correctness": response["Correctness"],
                        "completeness": response["Completeness"],
                        "clarity": response["Clarity"],
                        "depth": response["Depth"]
                    })
    return pd.DataFrame(data)

# Chargement des donn√©es
df = load_evaluation_data()

# Calcul des moyennes
averages = df.groupby("model")[["relevance", "correctness", "completeness", "clarity", "depth"]].mean().reset_index()

# Section 1: Vue d'ensemble
st.header("Vue d'Ensemble des Performances")

# Graphique des moyennes
fig = go.Figure()
for model in averages["model"].unique():
    model_data = averages[averages["model"] == model]
    fig.add_trace(go.Bar(
        name=model,
        x=["Pertinence", "Exactitude", "Exhaustivit√©", "Clart√©", "Profondeur"],
        y=[model_data["relevance"].iloc[0], 
           model_data["correctness"].iloc[0],
           model_data["completeness"].iloc[0],
           model_data["clarity"].iloc[0],
           model_data["depth"].iloc[0]],
        text=[f"{val:.1f}" for val in [model_data["relevance"].iloc[0],
                                      model_data["correctness"].iloc[0],
                                      model_data["completeness"].iloc[0],
                                      model_data["clarity"].iloc[0],
                                      model_data["depth"].iloc[0]]],
        textposition='auto',
    ))

fig.update_layout(
    title="Moyennes des Crit√®res par Mod√®le",
    barmode='group',
    yaxis=dict(range=[0, 5]),
    showlegend=True
)

st.plotly_chart(fig, use_container_width=True)

# Section 2: Analyse par Th√©matique
st.header("Analyse par Th√©matique")

# S√©lection de la th√©matique
selected_thematic = st.selectbox(
    "S√©lectionnez une th√©matique",
    sorted(df["thematic"].unique())
)

# Filtrage des donn√©es pour la th√©matique s√©lectionn√©e
thematic_data = df[df["thematic"] == selected_thematic]

# Graphique pour la th√©matique s√©lectionn√©e
fig_thematic = go.Figure()
for model in thematic_data["model"].unique():
    model_data = thematic_data[thematic_data["model"] == model]
    fig_thematic.add_trace(go.Bar(
        name=model,
        x=["Pertinence", "Exactitude", "Exhaustivit√©", "Clart√©", "Profondeur"],
        y = [
            model_data["relevance"].iloc[0],
            model_data["correctness"].iloc[0],
            model_data["completeness"].iloc[0],
            model_data["clarity"].iloc[0],
            model_data["depth"].iloc[0]
        ],
        text=[f"{val:.1f}" for val in [model_data["relevance"].iloc[0],
                                        model_data["correctness"].iloc[0],
                                        model_data["completeness"].iloc[0],
                                        model_data["clarity"].iloc[0],
                                        model_data["depth"].iloc[0]]],
        textposition='auto',
    ))

fig_thematic.update_layout(
    title=f"√âvaluation pour la th√©matique: {selected_thematic}",
    barmode='group',
    yaxis=dict(range=[0, 5]),
    showlegend=True
)

st.plotly_chart(fig_thematic, use_container_width=True)

# Section 3: Tableau d√©taill√©
st.header("Donn√©es D√©taill√©es")
st.dataframe(df, use_container_width=True)

# Section 4: Statistiques globales
st.header("Statistiques Globales")
col1, col2 = st.columns(2)

with col1:
    st.subheader("Moyennes par Mod√®le")
    st.dataframe(averages, use_container_width=True)

with col2:
    st.subheader("Moyennes par Crit√®re")
    criterion_means = df[["relevance", "correctness", "completeness", "clarity", "depth"]].mean()
    st.dataframe(criterion_means.to_frame("Moyenne"), use_container_width=True)

# Section 5: Conclusion
st.header("Conclusion")
st.markdown("""
### Points Forts
- Performance exceptionnelle en termes de pertinence et de clart√©
- Excellente coh√©rence entre les √©valuateurs
- Couverture compl√®te des sujets
""")